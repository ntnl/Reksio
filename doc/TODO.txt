
 Roadmap for v1.0

[X] Bootstrap
[X]     Script to create static test data
[X]     Setup module (create DB, directories and fake config) for test purposes
[X]     Read config
[X]     Connect to DB
[X] Internet
[X]     Set-up git hub account
[X]     Register a domain
[X] Configuration commands
[X]     Add repo
[X]         --help support
[X]         Reksio::API::Data
[X]             Implement add_repository
[X]             Implement get_repository
[X]         Implement guts
[X]         Automated test
[X]     Drop repo
[X]         --help support
[X]         Implement Reksio::API::Data::delete_repository
[X]         Implement guts
[X]         Automated test
[X]     Add build
[X]         --help support
[X]         Reksio::API::Data
[X]             Implement get_build
[X]             Implement add_build
[X]         Implement guts
[X]         Automated test
[X]     Drop build
[X]         --help support
[X]         Implement Reksio::API::Data::delete_build
[X]         Implement guts
[X]         Automated test
[X]     Schedule a build
[X]         --help support
[X]         Implement Reksio::API::Data::schedule_build
[X]         Implement guts
[X]         Automated test
[X] GIT vcs plugin
[X]     Working directory setup
[X]     Checkout revision functionality
[X]     Revisions list functionality
[X]     Automated test
[X] Inspect function
[X]     VCSFactory
[X]     Common initialization (config and help)
[X]     Checkout repository that is to be inspected
[X]     Get list of commits
[X]     Insert new commits into DB
[X]     Automated test
[X] Build function
[X]     Prepare for the build
[X]         Common initialization (config and help)
[X]         Read-in the configuration
[X]     Do the build
[X]         Checkout stuff to build
[X]         Run build command
[X]         Parse build results
[X]     Finish the build
[X]         Remove build directory
[X]         Dump results
[X]         Dump log
[X]     Automated test
[X]     Separated stages for: configure, build, test
[X] Report function
[X]     Prepare
[X]         Common initialization (config and help)
[X]         Find 'parent' revision
[X]         Load revision A and B metadata
[X]     Main functionality
[X]         Compare revision results
[X]         Prepare summaries
[X]         Send summaries
[X]             Find out what email address(es) to use
[X]                 Design the whole thing
[X]                 Implement email configuration
[X]                 Get emails for user/repository
[X]             Compose and send message
[X]     Automated test
[X] Dispatch functionality
[X]     Plan the whole thing
[X]     Common initialization (config and help)
[X]     Run Inspect script
[X]         Identify what needs to be updated
[X]         Execute the inspect command
[X]     Run Build script
[X]         Harvest non-built revisions and schedule builds
[X]         Execute the build command
[X]     Run Report script
[X]         Harvest not-reported builds and schedule reports
[X]         Execute the report command
[X]     Automated test
[>] Release beta version
[>]     Field testing - max 3-5 days
[X]         Deploy on private server, watch own repository.
[>]         Write missing documentation
[X]             API Documentation
[X]             VCS Documentation
[X]             Commands documentation
[ ]             Test framework documentation
[ ]         Improve test coverage
[>]         Debug
[X]             Sort IDs in reksio_dispatch, so stuff is built in "stable" order. Major.
[X]             Reports sent by Reksio have no title defined, thus get 'Haloooooo, nurse!' default. This looks funny ;) Major.
[X]             Add timestamp/date to Dispatch log-like output
[ ]             Dispatch required --single=0, otherwise dumps help. Blocker.
[ ]     Prepare stuff to upload
[ ]         Make a (spartan) website
[ ]         Make a package (Module::Build)
[ ]         Generate docs (from POD)
[ ]         Check README (possibly create)
[ ]         Generate source code dump
[ ]         Generate coverage report
[ ]     Upload stuff
[ ]         Upload documentation
[ ]         Upload dumped code
[ ]         Upload coverage report
[ ]         Upload archive
[ ]         Upload webpage
[ ]     Push news to social sites
[ ]         Twitter
[ ]         Identi.ca
[ ]         Facebook
[ ]         Linked.In

 Known issues to be resolved

 * more strict validation of input parameters (at the moment, Reksio trusts the User)
 * some automated tests are based on GIT test repo. Those will not run, if someone has not installed git :(
 * tmp directory should be configurable in settings file
 * Reksio will start building from first commit. Implement a way to tell him, that "old" revisions should not be touched.

 Future ideas

 * Command line utility to list repositories.
 * Command line utility to display server status (overall + detailed).
 * Define build stages: configuration, build, test - each having separate command and status.
    * Built-in support for TAP::Harness (so Reksio can list tests).
 * Dispatch commands in paralel (run more then one command at once).
    * Implement 'Exec' dispatcher
    * Transition 'Inspect', 'Build' and 'Report' into dispatcher framework.
 * 'subversion' vcs support.
 * Web UI.
 * 'archive' vcs support (supporting both file:// and http://).
 * 'ssh' dispatcher.
 * 'gearman' dispatcher.
 * 'html' reports.
 * 'xml' reports.
 * 'yaml' reports.
 * 'json' reports.
 * Web service to get the data.
 * Web service to remotely control the server.
 * If tests fail, compress working directory and store for later inspection.
 * Ability to 'pause' and 'resume' (starting of) builds.
 * Support for branches in GIT.
 * Bulk storage - either DB-based or FS-based (configurable).
 * Charts (in Web UI).
 * Improve users/notifications configuration.
    * Reksio totally ognores, that two different repos can have same user ID pointing to different person
 * Add -c/--config command line option
 * Measure, log and report Build (config, build, test) time.
 * Store information about who started the build (manually, automatic)
 * Provide a self-test command.


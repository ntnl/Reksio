
 Data structures:

    Filesystem:

        builds/   <-- directory where test-result-data is stored (can be named differently).
        builds/$repository_id/
        builds/$repository_id/$revision_id/
        builds/$repository_id/$revision_id/info.yaml
        builds/$repository_id/$revision_id/build_$build_id/    <-- directory where build/test results lay
        builds/$repository_id/$revision_id/build_$build_id/$result_id-log.txt         <-- diagnostic dump - STDOUT and STDERR, merged
        builds/$repository_id/$revision_id/build_$build_id/$result_id-details.yaml    <-- actual test results, formatted in YAML

 Reporting

    1) map VCS logins to Reksio user ids.
    2) assign Reksio user ids to contact infromation
    3) Barely enough is to put this information into a YAML file

---
"User Name":
  vcs_ids:
    - "Bartłomiej Syguła"
    - natanael
  email: reksio@natanael.krakow.pl

 Dispatching

    First stage (barely enough):

        foreach $repo
            Inspect
            foreach $revision
                foreach build
                    Schedule a build
                    Run Build
                    Do Report
        if nothing was done - wait a while

    Second stage (parallel processing):

        foreach $thing (Inspect, Build, Report)
            Is there something to $do?
                Yes - Is it queued?
                    No - Queue.

            Is there something queued for $doing?
                Yes - Inspect.
                Remove from queue.

        Queue handling is common across all functionality.
        Harvesting candidates is similar:
            Inspect harvests Repositories, that "need inspecting"
                - time since last inspect > configured interval (add such option to Repo table)
            Build harvests Build+Revision pairs
                - there are less then configured such builds running (add such option to Build table)
                - there are less then configured builds for repo running (add such option to Repo table)
                - there are less then configured (server-wide) builds running (add config option)
                - there are unbuilt revisions
            Report harvests Results
                - no reports are running for the repo
                - there are unreported Results

BUG!

The 'revision_id' parameter (undef) to Reksio::API::Data::get_last_result was an 'undef', which is not one of the allowed types: scalar
 at /home/reksio/Reksio/scripts/../lib//Reksio/API/Data.pm line 699
	Reksio::API::Data::get_last_result('build_id', 2, 'revision_id', undef) called at /home/reksio/Reksio/scripts/../lib//Reksio/Cmd/Report.pm line 86
	Reksio::Cmd::Report::main('--result_id', 54) called at /home/reksio/Reksio/scripts/../lib//Reksio/Cmd/Dispatch.pm line 263
	Reksio::Cmd::Dispatch::run_command('Report', '--result_id', 54) called at /home/reksio/Reksio/scripts/../lib//Reksio/Cmd/Dispatch.pm line 210
	Reksio::Cmd::Dispatch::main('--single=0') called at /home/reksio/Reksio/scripts//reksio_dispatch line 23



 Functionality:

    Dispatch (give tasks to workers)
    Inspect repository (check if there are new commits)
    Run build for a commit (and store test results)
    Compare test results from two commits (and report back)

 Utilities:

    Add Repository
    Drop Repository
    Add Build
    Drop Build
    Schedule a build
    Display status

 Data structures:

    DB:

        (see: data/sql/)

    Filesystem:

        builds/   <-- directory where test-result-data is stored (can be named differently).
        builds/$repository_id/
        builds/$repository_id/$revision_id/
        builds/$repository_id/$revision_id/info.yaml
        builds/$repository_id/$revision_id/build_$build_id/    <-- directory where build/test results lay
        builds/$repository_id/$revision_id/build_$build_id/$result_id-log.txt         <-- diagnostic dump - STDOUT and STDERR, merged
        builds/$repository_id/$revision_id/build_$build_id/$result_id-details.yaml    <-- actual test results, formatted in YAML

 Config:

 workspace
    workspace repository

 db
    database - either a sqlite file or (in future) stuff needed for normal DB.

 build_results
    directory where build-result-data is stored

 users_file
    Location of the "Users file"

 Config file location:

    $ENV{REKSIO_CONFIG}
    ./.reksio
    ./.reksio.conf
    ~/.reksio
    ~/.reksio.conf
    /etc/reksio
    /etc/reksio.conf

 Reporting

    1) map VCS logins to Reksio user ids.
    2) assign Reksio user ids to contact infromation
    3) Barely enough is to put this information into a YAML file

---
"User Name":
  vcs_ids:
    - "Bartłomiej Syguła"
    - natanael
  email: reksio@natanael.krakow.pl



 Dispatching

    First stage (barely enough):

        foreach $repo
            Inspect
            foreach $revision
                foreach build
                    Schedule a build
                    Run Build
                    Do Report
        if nothing was done - wait a while

    Second stage (parallel processing):

        foreach $thing (Inspect, Build, Report)
            Is there something to $do?
                Yes - Is it queued?
                    No - Queue.

            Is there something queued for $doing?
                Yes - Inspect.
                Remove from queue.

        Queue handling is common across all functionality.
        Harvesting candidates is similar:
            Inspect harvests Repositories, that "need inspecting"
                - time since last inspect > configured interval (add such option to Repo table)
            Build harvests Build+Revision pairs
                - there are less then configured such builds running (add such option to Build table)
                - there are less then configured builds for repo running (add such option to Repo table)
                - there are less then configured (server-wide) builds running (add config option)
                - there are unbuilt revisions
            Report harvests Results
                - no reports are running for the repo
                - there are unreported Results

